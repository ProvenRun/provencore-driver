# If KERNELRELEASE is defined, we have been invoked from the kernel build
# system and we can use its language.

ifneq ($(KERNELRELEASE),)

obj-m := pnc_shdev.o
pnc_shdev-objs := shdev.o mmcblk.o enetdev.o spidev.o

# Supported features: see Kconfig file for details if you don't plan to build
# this module thanks to menuconfig...
#
ccflags-y := \
	-Wno-declaration-after-statement \
	-Wno-unused-function \
	-Wno-error=date-time

PNC_CONFIG_MK := $(PWD)/pnc_config.mk
-include $(PNC_CONFIG_MK)

CC_VERSION := $(shell $(CC) -dumpversion)
IS_VER_GE = $(shell printf "$2\n$1" | sort --version-sort --check=quiet && echo YES)

ifeq ($(ARCH), arm64)
ifeq ($(call IS_VER_GE,$(CC_VERSION),10.1), YES)
ccflags-y += -mno-outline-atomics
endif
endif

# Flags for specific files
#CFLAGS_shdev.o := -DDEBUG

# Otherwise, we were called directly from the command line ; invoke the
# kernel build system.
else

PWD := $(shell pwd)
KERNEL_SRC ?= /lib/modules/$(shell uname -r)/build
KERNELDIR ?= $(KERNEL_SRC)

# Need to build with REE driver exported symbols 
PNC_REE_SYMBOLS ?= $(PWD)/../ree/Module.symvers
KBUILD_EXTRA_SYMBOLS := $(PNC_REE_SYMBOLS)

default:
	$(MAKE) CROSS_COMPILE=$(CROSS_COMPILE) ARCH=$(ARCH) -C $(KERNELDIR) \
		M=$(PWD) KBUILD_EXTRA_SYMBOLS=$(KBUILD_EXTRA_SYMBOLS) modules

endif

.PHONY: modules_install
modules_install:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules_install

.PHONY: clean
clean:
	$(MAKE) CROSS_COMPILE=$(CROSS_COMPILE) ARCH=$(ARCH) -C $(KERNELDIR) \
		M=$(PWD) clean
	rm -f *.o *.ko

SHDEV_SOURCES := \
	enetdev.c \
	internal.h \
	Makefile \
	misc/provencore/pnr_ring.h \
	misc/provencore/ree_session.h \
	misc/provencore/service_ids.h \
	mmcblk.c \
	pnc_config.mk \
	shdev.c \
	shdev.h \
	spidev.c

SHDEV_ARCHIVE := pnc-shdev.tar.gz
$(SHDEV_ARCHIVE): $(SHDEV_SOURCES)
	$(Q)tar czf $@ --transform 's#^#pnc-shdev/#' --dereference $^
